// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TodoWebApi.Models;

namespace TodoWebApi.Migrations
{
    [DbContext(typeof(TodoDbContext))]
    [Migration("20210501193817_mgt0")]
    partial class mgt0
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("TodoWebApi.Models.Todo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDone")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("GroupId", "Name")
                        .IsUnique();

                    b.ToTable("Todo");
                });

            modelBuilder.Entity("TodoWebApi.Models.TodoGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Name")
                        .IsUnique();

                    b.ToTable("TodoGroup");
                });

            modelBuilder.Entity("TodoWebApi.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("TodoWebApi.Models.Todo", b =>
                {
                    b.HasOne("TodoWebApi.Models.TodoGroup", "Group")
                        .WithMany("Todos")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TodoWebApi.Models.User", null)
                        .WithMany("Todos")
                        .HasForeignKey("UserId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("TodoWebApi.Models.TodoGroup", b =>
                {
                    b.HasOne("TodoWebApi.Models.User", null)
                        .WithMany("TodoGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TodoWebApi.Models.TodoGroup", b =>
                {
                    b.Navigation("Todos");
                });

            modelBuilder.Entity("TodoWebApi.Models.User", b =>
                {
                    b.Navigation("TodoGroups");

                    b.Navigation("Todos");
                });
#pragma warning restore 612, 618
        }
    }
}
